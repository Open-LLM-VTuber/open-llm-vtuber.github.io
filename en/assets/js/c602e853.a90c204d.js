"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1341],{7824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"development-guide/backend/tts","title":"TTS","description":"tim: TTS installation is always the most difficult step in adding TTS support. The second most difficult is getting others to install this TTS as well.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development-guide/backend/tts.mdx","sourceDirName":"development-guide/backend","slug":"/development-guide/backend/tts","permalink":"/en/docs/development-guide/backend/tts","draft":false,"unlisted":false,"editUrl":"https://github.com/Open-LLM-VTuber/Open-LLM-VTuber-Docs/tree/main/docs/development-guide/backend/tts.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docSidebar","previous":{"title":"\u540e\u7aef\u5f00\u53d1\u6307\u5357","permalink":"/en/docs/development-guide/backend"},"next":{"title":"asr","permalink":"/en/docs/development-guide/backend/asr"}}');var o=n(4848),s=n(8453);const d={sidebar_position:1},l="TTS",c={},a=[{value:"0. Overview",id:"0-overview",level:2},{value:"0.1 Requirements",id:"01-requirements",level:3},{value:"0.2 Step Overview",id:"02-step-overview",level:3},{value:"Development",id:"development",level:4},{value:"Testing",id:"testing",level:4},{value:"Documentation",id:"documentation",level:4},{value:"1. Development:",id:"1-development",level:2},{value:"2.1 Add new TTS implementation to the <code>tts</code> directory",id:"21-add-new-tts-implementation-to-the-tts-directory",level:3},{value:"Input Values",id:"input-values",level:4},{value:"2.2 Add code to initialize your implemented tts class in the <code>tts_factory</code> factory class.",id:"22-add-code-to-initialize-your-implemented-tts-class-in-the-tts_factory-factory-class",level:3},{value:"2.3 Add tts configuration items in <code>conf.yaml</code> and <code>conf.CN.yaml</code> files",id:"23-add-tts-configuration-items-in-confyaml-and-confcnyaml-files",level:3},{value:"2.4 Add the configuration related to your tts to the configuration file data validation code in the <code>config_manager/tts.py</code> file.",id:"24-add-the-configuration-related-to-your-tts-to-the-configuration-file-data-validation-code-in-the-config_managerttspy-file",level:3},{value:"3. Testing and Submitting Code",id:"3-testing-and-submitting-code",level:2},{value:"4. Supplementary Documentation",id:"4-supplementary-documentation",level:2}];function r(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"tts",children:"TTS"})}),"\n",(0,o.jsx)(t.h1,{id:"how-to-add-new-tts-support",children:"How to Add New TTS Support?"}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"tim: TTS installation is always the most difficult step in adding TTS support. The second most difficult is getting others to install this TTS as well."})}),"\n",(0,o.jsx)(t.p,{children:"The steps to add TTS are relatively fixed and do not require a deep understanding of the Open-LLM-VTuber project code, so it is relatively suitable for newcomers to familiarize themselves with the project (Pull Requests are also easier to merge)."}),"\n",(0,o.jsx)(t.h2,{id:"0-overview",children:"0. Overview"}),"\n",(0,o.jsx)(t.h3,{id:"01-requirements",children:"0.1 Requirements"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Open-LLM-VTuber version higher than ",(0,o.jsx)(t.code,{children:"v1.0.0"}),"."]}),"\n",(0,o.jsx)(t.li,{children:"Ability to write Python (though you'll know if you can as you follow the steps below. You can learn as you go)"}),"\n",(0,o.jsx)(t.li,{children:"Basic understanding of GitHub open source workflow. Specifically, understanding the concepts of fork and Pull Request."}),"\n",(0,o.jsxs)(t.li,{children:["Understanding of how to use uv to manage Python project dependencies. (If you don't know uv, ",(0,o.jsx)(t.a,{href:"https://docs.astral.sh/uv/getting-started/features/#projects",children:"learn here"}),")"]}),"\n",(0,o.jsx)(t.li,{children:"A little knowledge of Pydantic (or... AI knowledge is fine too)"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"02-step-overview",children:"0.2 Step Overview"}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsxs)(t.p,{children:["This project directory follows the src structure, with all backend code stored in the ",(0,o.jsx)(t.code,{children:"src/open_llm_vtuber"})," directory. The ",(0,o.jsx)(t.code,{children:"tts"})," and ",(0,o.jsx)(t.code,{children:"config_manager"})," mentioned later are both in the ",(0,o.jsx)(t.code,{children:"src/open_llm_vtuber"})," directory."]}),(0,o.jsx)(t.p,{children:"Frontend code references, configuration files, a very small amount of code and other non-code files are stored in the project root directory."})]}),"\n",(0,o.jsx)(t.h4,{id:"development",children:"Development"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Add new TTS implementation to the ",(0,o.jsx)(t.code,{children:"tts"})," directory"]}),"\n",(0,o.jsxs)(t.li,{children:["Add code to initialize your implemented tts class in the ",(0,o.jsx)(t.code,{children:"tts_factory"})," factory class."]}),"\n",(0,o.jsxs)(t.li,{children:["Add tts configuration items in ",(0,o.jsx)(t.code,{children:"conf.yaml"})," and ",(0,o.jsx)(t.code,{children:"conf.CN.yaml"})," files"]}),"\n",(0,o.jsxs)(t.li,{children:["Add the configuration related to your tts to the configuration file data validation code in the ",(0,o.jsx)(t.code,{children:"config_manager/tts.py"})," file."]}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"testing",children:"Testing"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Switch to your tts implementation and test it, ensuring it works normally with empty input and strange punctuation."}),"\n",(0,o.jsx)(t.li,{children:"Organize the code and submit a pull request"}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"documentation",children:"Documentation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Please go to ",(0,o.jsx)(t.a,{href:"https://github.com/Open-LLM-VTuber/open-llm-vtuber.github.io/blob/main/docs/user-guide/backend/tts.md",children:"User Guide/Backend User Guide/Text-to-Speech (TTS)"}),", edit the source code of the TTS documentation and add installation guide for the TTS you implemented."]}),"\n"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"If you encounter difficulties at this step, you can contact me directly, and I can help you add the documentation to the documentation website (but you need to write the installation guide yourself!)"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"1-development",children:"1. Development:"}),"\n",(0,o.jsxs)(t.h3,{id:"21-add-new-tts-implementation-to-the-tts-directory",children:["2.1 Add new TTS implementation to the ",(0,o.jsx)(t.code,{children:"tts"})," directory"]}),"\n",(0,o.jsxs)(t.p,{children:["Go to the ",(0,o.jsx)(t.code,{children:"src/open_llm_vtuber/tts"})," directory."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"tts",src:n(1780).A+"",width:"444",height:"856"})}),"\n",(0,o.jsx)(t.p,{children:"There are several important files in the directory:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"tts_interface.py"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This is the interface class for the tts class. All tts must inherit from this interface."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"tts_factory.py"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The factory class for tts. The backend will use configuration items to call this factory class to initialize tts and get tts instances."}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The remaining files are implementations of tts supported by the project. I recommend referring to the implementation of ",(0,o.jsx)(t.code,{children:"edge_tts.py"}),", which is also the default tts for the project."]}),"\n",(0,o.jsxs)(t.p,{children:["Please refer to ",(0,o.jsx)(t.code,{children:"tts_interface.py"})," and other tts implementations to add new tts."]}),"\n",(0,o.jsxs)(t.p,{children:["You can choose to implement either ",(0,o.jsx)(t.code,{children:"async_generate_audio"})," or ",(0,o.jsx)(t.code,{children:"generate_audio"}),". The project backend is mainly asynchronous code. In ",(0,o.jsx)(t.code,{children:"tts_interface.py"}),", if you choose to implement the synchronous ",(0,o.jsx)(t.code,{children:"generate_audio"})," function, the ",(0,o.jsx)(t.code,{children:"async_generate_audio"})," function will wrap the ",(0,o.jsx)(t.code,{children:"generate_audio"})," function into an asynchronous function."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"generate_audio"})," function will not be called externally, so if your tts supports asynchronous operations, you can only implement the ",(0,o.jsx)(t.code,{children:"async_generate_audio"})," function."]}),"\n",(0,o.jsx)(t.h4,{id:"input-values",children:"Input Values"}),"\n",(0,o.jsx)(t.p,{children:"You will most likely want to get some parameters from the configuration file when initializing this tts class to customize some options like voice and language. Please write these configurable parameters as parameters of the constructor."}),"\n",(0,o.jsxs)(t.h3,{id:"22-add-code-to-initialize-your-implemented-tts-class-in-the-tts_factory-factory-class",children:["2.2 Add code to initialize your implemented tts class in the ",(0,o.jsx)(t.code,{children:"tts_factory"})," factory class."]}),"\n",(0,o.jsxs)(t.p,{children:["Go to the ",(0,o.jsx)(t.code,{children:"tts_factory.py"})," file and add initialization logic for the new tts in the ",(0,o.jsx)(t.code,{children:"get_tts_engine"})," function."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"get_tts_engine"})," function will be called by external logic and return an instance of tts."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"engine_type"})," indicates what the user wrote in the ",(0,o.jsx)(t.code,{children:"tts_model"})," option in ",(0,o.jsx)(t.code,{children:"conf.yaml"}),", which is the choice of tts."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"kwargs"})," is a dictionary containing the configuration under ",(0,o.jsx)(t.code,{children:"tts_config"})," for this ",(0,o.jsx)(t.code,{children:"tts_model"})," in ",(0,o.jsx)(t.code,{children:"conf.yaml"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"For example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:'  tts_config:\n    tts_model: "edge_tts"\n    # text to speech model options:\n    #   "azure_tts", "pyttsx3_tts", "edge_tts", "bark_tts",\n    #   "cosyvoice_tts", "melo_tts", "coqui_tts",\n    #   "fish_api_tts", "x_tts", "gpt_sovits_tts", "sherpa_onnx_tts"\n\n    azure_tts:\n      api_key: "azure-api-key"\n      region: "eastus"\n      voice: "en-US-AshleyNeural"\n      pitch: "26" # percentage of the pitch adjustment\n      rate: "1" # rate of speak\n\n    bark_tts:\n      voice: "v2/en_speaker_1"\n\n    edge_tts:\n      # Check out doc at https://github.com/rany2/edge-tts\n      # Use `edge-tts --list-voices` to list all available voices\n      voice: "en-US-AvaMultilingualNeural" # "en-US-AvaMultilingualNeural" #"zh-CN-XiaoxiaoNeural" # "ja-JP-NanamiNeural"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["When ",(0,o.jsx)(t.code,{children:"tts_model"})," is set to ",(0,o.jsx)(t.code,{children:"edge_tts"}),":"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The input value of ",(0,o.jsx)(t.code,{children:"engine_type"})," will be ",(0,o.jsx)(t.code,{children:"edge_tts"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"kwargs"})," will be a dictionary like this:"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'{"voice": "en-US-AvaMultilingualNeural"}\n'})}),"\n",(0,o.jsxs)(t.h3,{id:"23-add-tts-configuration-items-in-confyaml-and-confcnyaml-files",children:["2.3 Add tts configuration items in ",(0,o.jsx)(t.code,{children:"conf.yaml"})," and ",(0,o.jsx)(t.code,{children:"conf.CN.yaml"})," files"]}),"\n",(0,o.jsxs)(t.p,{children:["Go to ",(0,o.jsx)(t.code,{children:"conf.yaml"})," and ",(0,o.jsx)(t.code,{children:"conf.CN.yaml"})," (Chinese version of conf.yaml by default), and add configuration items needed for the new tts to ",(0,o.jsx)(t.code,{children:"tts_config"}),"."]}),"\n",(0,o.jsxs)(t.h3,{id:"24-add-the-configuration-related-to-your-tts-to-the-configuration-file-data-validation-code-in-the-config_managerttspy-file",children:["2.4 Add the configuration related to your tts to the configuration file data validation code in the ",(0,o.jsx)(t.code,{children:"config_manager/tts.py"})," file."]}),"\n",(0,o.jsxs)(t.p,{children:["Since version ",(0,o.jsx)(t.code,{children:"v1.0.0"}),", the project has introduced Pydantic-based configuration file data validation, so if we want to add configurable options in ",(0,o.jsx)(t.code,{children:"conf.yaml"}),", we need to modify the corresponding Pydantic model."]}),"\n",(0,o.jsxs)(t.p,{children:["Go to the ",(0,o.jsx)(t.code,{children:"src/open_llm_vtuber/config_manager/tts.py"})," file. Refer to other tts implementations, add configuration classes in tts.py, and add tts to ",(0,o.jsx)(t.code,{children:"TTSConfig"})," at the bottom."]}),"\n",(0,o.jsx)(t.h2,{id:"3-testing-and-submitting-code",children:"3. Testing and Submitting Code"}),"\n",(0,o.jsx)(t.p,{children:"Test the tts you added, confirm that the project can run normally, and all configuration items can be used normally."}),"\n",(0,o.jsxs)(t.p,{children:["Then use the ",(0,o.jsx)(t.code,{children:"uv run ruff format"})," command in the command line to format the code."]}),"\n",(0,o.jsx)(t.p,{children:"After that, you can submit a pull request."}),"\n",(0,o.jsx)(t.admonition,{type:"danger",children:(0,o.jsxs)(t.p,{children:["Please put default options in the ",(0,o.jsx)(t.code,{children:"conf.yaml"})," and ",(0,o.jsx)(t.code,{children:"conf.CN.yaml"})," files. Please do not randomly change other options in the configuration files."]})}),"\n",(0,o.jsx)(t.admonition,{type:"danger",children:(0,o.jsx)(t.p,{children:"Please do not push your own API key to the branch. Please check the code you are about to submit before submitting."})}),"\n",(0,o.jsx)(t.h2,{id:"4-supplementary-documentation",children:"4. Supplementary Documentation"}),"\n",(0,o.jsxs)(t.p,{children:["Please go to ",(0,o.jsx)(t.a,{href:"https://github.com/Open-LLM-VTuber/open-llm-vtuber.github.io/blob/main/docs/user-guide/backend/tts.md",children:"User Guide/Backend User Guide/Text-to-Speech (TTS)"}),", edit the source code of the TTS documentation and add installation guide for the TTS you implemented."]}),"\n",(0,o.jsx)(t.p,{children:"Note that our documentation is available in both Chinese and English. If possible, you can complete one language first and then use AI to translate it into the other language."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},1780:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/tts_package-e4fc3c9d36c01a7d37a641447dd03f58.png"},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var i=n(6540);const o={},s=i.createContext(o);function d(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);